{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","temperature","setTemperature","description","setDescription","cityName","setCityName","inputData","setInputData","emoji","setEmoji","className","type","placeholder","value","onChange","e","target","required","onClick","axios","get","then","res","data","list","main","temp","weather","name","icon","console","log","catch","error","toast","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAiFeA,MAzEf,WACE,MAAsCC,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA0BR,mBAAS,IAAnC,mBAAOS,EAAP,KAAcC,EAAd,KAiDA,OACE,qBAAKC,UAAU,MAAf,SACE,qBAAKA,UAAU,OAAf,SACA,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,UAAd,wBACA,uBAAOC,KAAK,OAAOC,YAAY,kBAAmBC,MAAOP,EAAWQ,SAAU,SAACC,GAAKR,EAAaQ,EAAEC,OAAOH,QAASI,UAAQ,IAC3H,qBAAKP,UAAU,eAAf,SACG,wBAAQQ,QA/CjB,WACEC,IAAMC,IAAN,yDAA4Dd,EAA5D,yDACAe,MAAK,SAACC,GAEJ,IAAItB,EAAesB,EAAIC,KAAKC,KAAK,GAAGC,KAAKC,KACrCxB,EAAcoB,EAAIC,KAAKC,KAAK,GAAGG,QAAQ,GAAGF,KAC1CrB,EAAWkB,EAAIC,KAAKC,KAAK,GAAGI,KAC5BC,EAAOP,EAAIC,KAAKC,KAAK,GAAGG,QAAQ,GAAGE,KACvCC,QAAQC,IAAIF,GAEH,OAANA,GAAqB,OAANA,GAAsB,OAANA,GAAoB,OAANA,GAAqB,OAANA,GAAqB,OAANA,GAAsB,OAANA,GAAoB,OAANA,EAC1GpB,EAAS,gBAEG,OAANoB,GAAuB,OAANA,EACvBpB,EAAS,gBAEG,OAANoB,GAAqB,OAANA,EACrBpB,EAAS,UAEG,OAANoB,GAAqB,OAANA,EACrBpB,EAAS,gBAEG,OAANoB,GAAqB,OAANA,GACrBpB,EAAS,sBAIXR,EAAeD,GACfK,EAAYD,GACZD,EAAeD,MAEd8B,OAAM,SAACC,GAlCOC,IAAMD,MAAM,mCAkDIvB,UAAU,mBAApC,gCAEH,qBAAIA,UAAU,cAAd,UAA6BV,EAA7B,aACA,oBAAIU,UAAU,WAAd,SAA0BN,IAC1B,qBAAIM,UAAU,YAAd,cAA4BR,EAA5B,IAAyC,sBAAMQ,UAAU,QAAhB,SAAyBF,OAClE,cAAC,IAAD,YC9DO2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.20df5e8b.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport './App.css';\nimport bootstrap from '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  const [temperature, setTemperature] = useState(0);\n  const [description, setDescription] = useState(\"\");\n  const [cityName, setCityName] = useState(\"\");\n  const [inputData, setInputData] = useState(\"\");\n  const [emoji, setEmoji] = useState(\"\");\n\n\n// useEffect(()=>{\n//   getData();\n// },[inputData]);\nconst notify = () => toast.error(\"Opps Error, City Not Found!\");\n\n\n  function getData(){\n    axios.get(`https://api.openweathermap.org/data/2.5/find?q=${inputData}&units=metric&appid=6faebeb9d32de74e053ab7b148a867dd`).\n    then((res)=>{\n      \n      var temperature =  res.data.list[0].main.temp;\n      var description = res.data.list[0].weather[0].main;\n      var cityName = res.data.list[0].name;\n      var icon = res.data.list[0].weather[0].icon;\n      console.log(icon);\n      \n      if(icon==\"01d\" || icon==\"02d\"  || icon==\"03d\" ||icon==\"04d\" || icon==\"01n\" || icon==\"02n\"  || icon==\"03n\" ||icon==\"04n\"  ){\n        setEmoji(\"🌥\"); /// clouds\n      }\n      else if(icon==\"09d\"  ||  icon==\"09n\"){\n        setEmoji(\"🌧\")  /// rain\n      }\n      else if(icon==\"11d\" || icon==\"11n\"){\n        setEmoji(\"⛈\")  /// thunderstorm\n      }\n      else if(icon==\"13d\" || icon==\"13n\"){\n        setEmoji(\"❄️\")  /// snow\n      }\n      else if(icon==\"50d\" || icon==\"50n\"){\n        setEmoji(\"🌫️\")  /// mist\n      }\n\n\n      setTemperature(temperature); \n      setCityName(cityName);\n      setDescription(description);\n    \n    }).catch((error)=>{\n      // console.log(error);\n      notify();\n    })\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"card\">\n      <div className=\"col\">\n        <h1 className=\"heading\">Weatherify</h1>\n        <input type=\"text\" placeholder=\"Enter city name\"  value={inputData} onChange={(e)=>{setInputData(e.target.value)}} required/>\n        <div className=\"d-grid gap-2\">\n           <button onClick={getData} className=\"btn  btn-success\">Get Weather Info</button>\n        </div>\n        <h1 className=\"temperature\">{temperature} ℃</h1>\n        <h1 className=\"cityname\">{cityName}</h1>\n        <h1 className=\"condition\"> {description} <span className=\"emoji\">{emoji}</span></h1>\n        <ToastContainer />\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}